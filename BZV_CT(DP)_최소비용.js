// Minimum Cost (최소 비용)

/* 📌 문제 설명:
x축 위에 n개의 지점이 있습니다. 각 지점 i에는 비용 cost[i]가 부과됩니다.

출발점은 항상 좌표 x = 0입니다.

이동할 때는 최대 길이 k만큼 점프할 수 있습니다.

어느 지점에 도착하면, 그 지점의 비용이 추가됩니다.

목표는 길이 k 이하의 점프만 이용해서 지점 n에 도달할 때의 최소 총 비용을 구하는 것입니다.

예시:
n = 5
cost = [4, 3, 9, 3, 1]  -> 각 지점에서 발생하는 비용 배열
k = 2 -> 한 번에 점프할 수 있는 최대 거리
 
최적의 점프 경로는:
0 → 2 → 4 → 5

즉, 지점 2, 4, 5에 도착하므로 총 비용은: 3 + 3 + 1 = 7

이것이 가능한 최소 비용입니다. 

제약 조건
1 ≤ n ≤ 3 * 10^5
1 ≤ k ≤ n
1 ≤ cost[i] ≤ 10^9

*/


// 이문제는 DP를 이용하여 풀이 하였다.
function solution(cost, k) {
    const n = cost.length;
    // dp[i]: i번째 위치까지 오는 최소 비용.
    const dp = new Array(n+1).fill(Infinity); // 최소값을 구해야 하므로 초기 비교값은 가장 큰값으로 초기화.
    dp[0] = 0; // 처음 제자리 시작위치.

    for(let i=1; i<=n; i++){  // dp의 n번까지 오는 모든 경우의 수.
        for(let j=1; j<=k; j++){ // 각위치 까지 가는 뛸수있는 k번까지 칸수의 모든 경우의수.
            if(i - j >= 0) { // 인덱스 위치가 dp배열 위에 있어야함.
                dp[i] = Math.min(dp[i], dp[i-j] + cost[i-1]);  // dp[i-j]는 현재위치에서 - k거리 전 값이다.
            }
        }
    }

    return dp[n];
};

